plugins {
	id "java-library"

	id "com.github.jk1.dependency-license-report" version "1.17"
//	id "io.snyk.gradle.plugin.snykplugin" version "0.4"
}

dependencies {
	api project(":ml-javaclient-util")

	api 'org.springframework:spring-web:5.3.29'
	api 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

	implementation 'jaxen:jaxen:1.2.0'

	// Forcing usage of 3.4.0 instead of 3.2.0 to address vulnerability - https://security.snyk.io/vuln/SNYK-JAVA-COMSQUAREUPOKIO-5820002
	implementation 'com.squareup.okio:okio:3.4.0'
	implementation 'com.squareup.okhttp3:okhttp:4.11.0'
	implementation 'io.github.rburgst:okhttp-digest:2.7'

	implementation 'org.apache.httpcomponents:httpclient:4.5.14'
	implementation 'org.jdom:jdom2:2.0.6.1'

	// Forcing httpclient to use this to address https://snyk.io/vuln/SNYK-JAVA-COMMONSCODEC-561518
	implementation 'commons-codec:commons-codec:1.15'

	// For EqualsBuilder; added in 3.8.1 to support detecting if a mimetype's properties have changed or not
	implementation "org.apache.commons:commons-lang3:3.12.0"

	// For PreviewInterceptor; can be excluded if that feature is not used
	implementation("com.flipkart.zjsonpatch:zjsonpatch:0.4.14") {
		// Prefer the api version declared above
		exclude module: "jackson-databind"
	}

	// Required for Java 11
	implementation "javax.xml.bind:jaxb-api:2.3.1"
	implementation "com.sun.xml.bind:jaxb-core:2.3.0.1"
	implementation "com.sun.xml.bind:jaxb-impl:2.3.7"

	// Don't want to include this in the published jar, just the executable jar
	compileOnly "com.beust:jcommander:1.82"
	compileOnly "ch.qos.logback:logback-classic:1.3.5"

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	testImplementation 'org.springframework:spring-test:5.3.29'
	testImplementation 'commons-io:commons-io:2.11.0'
	testImplementation 'xmlunit:xmlunit:1.6'
}

// This ensures that Gradle includes in the published jar any non-java files under src/main/java
sourceSets.main.resources.srcDir 'src/main/java'

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier 'sources'
	from sourceSets.main.allSource
	// For unknown reasons, Gradle 7.1 (but not 6.x) is complaining that AbstractManager.java is a duplicate.
	duplicatesStrategy = "exclude"
}

artifacts {
	archives javadocJar, sourcesJar
}

task generatePomForDependencyGraph(dependsOn: "generatePomFileForMainJavaPublication") {
	description = "Prepare for a release by making a copy of the generated pom file in the root directory so that it " +
		"can enable Github's Dependency Graph feature, which does not yet support Gradle"
	doLast {
		def preamble = '<?xml version="1.0" encoding="UTF-8"?>'
		def comment = "<!--\n" +
			"This file was generated via Gradle and is being used primarily for github's Dependency Graph feature.\n" +
			"It is not intended to be used to build this project.\n" +
			"-->"
		def fileText = file("build/publications/mainJava/pom-default.xml").getText()
		file("pom.xml").setText(fileText.replace(preamble, preamble + comment))
	}
}

publishing {
	publications {
		mainJava(MavenPublication) {
			pom {
				name = "${group}:${project.name}"
				description = "Java client for the MarkLogic REST Management API and for deploying applications to MarkLogic"
				packaging = "jar"
				url = "https://github.com/marklogic-community/${project.name}"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
				developers {
					developer {
						id = "marklogic"
						name = "MarkLogic Github Contributors"
						email = "general@developer.marklogic.com"
						organization = "MarkLogic"
						organizationUrl = "https://www.marklogic.com"
					}
				}
				scm {
					url = "git@github.com:marklogic-community/${project.name}.git"
					connection = "scm:git@github.com:marklogic-community/${project.name}.git"
					developerConnection = "scm:git@github.com:marklogic-community/${project.name}.git"
				}
			}
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			if (project.hasProperty("mavenUser")) {
				credentials {
					username mavenUser
					password mavenPassword
				}
				url publishUrl
			} else {
				name = "central"
				url = mavenCentralUrl
				credentials {
					username mavenCentralUsername
					password mavenCentralPassword
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events 'started','passed', 'skipped', 'failed'
		exceptionFormat 'full'
	}
}

task executableJar(type: Jar) {
	description = "Construct an executable jar for executing ml-app-deployer commands via the command line"
	archiveBaseName = "deployer"
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	manifest {
		attributes("Main-Class": "com.marklogic.appdeployer.cli.Main")
	}
	// Include this project's class files
	from sourceSets.main.output
	// Include all project dependencies
	from {
		configurations.compileClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

//// See https://github.com/snyk/gradle-plugin for more information
//snyk {
//	//arguments = '--all-sub-projects'
//	severity = 'low'
//	api = snykToken
//	autoDownload = true
//	autoUpdate = true
//}
