plugins {
  id "groovy"

	// Ignored as it depends on Java 11; can uncomment and use Java 11 when it needs to be run
	//  id "com.github.jk1.dependency-license-report" version "2.1"
  id "com.gradle.plugin-publish" version "0.20.0"
	id "java-gradle-plugin"
}

dependencies {
  implementation gradleApi()
	implementation localGroovy()

	api project(":ml-app-deployer")
	implementation "com.marklogic:mlcp-util:1.0.1"
	implementation "com.marklogic:marklogic-data-movement-components:2.7.0"
	implementation "commons-io:commons-io:2.11.0"

	compileOnly "com.marklogic:marklogic-unit-test-client:1.4.0"

	testImplementation localGroovy()
	testImplementation gradleTestKit()
	testImplementation 'xmlunit:xmlunit:1.6'

	// Force spock-core to use 4.13.2 to avoid security issue in 4.11
	testImplementation 'junit:junit:4.13.2'
	testImplementation('org.spockframework:spock-core:2.1-groovy-3.0') {
		exclude module: 'groovy-all'
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allJava
  from sourceSets.main.allGroovy
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//	classifier "javadoc"
//	from javadoc
//}

artifacts {
	archives javadocJar, sourcesJar
}
signing {
	sign configurations.archives
}

task generatePomForDependencyGraph(dependsOn: "generatePomFileForMainJavaPublication") {
	description = "Prepare for a release by making a copy of the generated pom file in the root directory so that it " +
		"can enable Github's Dependency Graph feature, which does not yet support Gradle"
	doLast {
		def preamble = '<?xml version="1.0" encoding="UTF-8"?>'
		def comment = "<!--\n" +
			"This file was generated via Gradle and is being used primarily for github's Dependency Graph feature.\n" +
			"It is not intended to be used to build this project.\n" +
			"-->"
		def fileText = file("build/publications/mainJava/pom-default.xml").getText()
		file("pom.xml").setText(fileText.replace(preamble, preamble + comment))
	}
}

publishing {
	publications {
		mainJava(MavenPublication) {
			pom {
				name = "${group}:${project.name}"
				description = "Gradle plugin for automating everything involving MarkLogic"
				packaging = "jar"
				url = "https://github.com/marklogic/${project.name}"
				licenses {
					license {
						name = "The Apache License, Version 2.0"
						url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
					}
				}
				developers {
					developer {
						id = "marklogic"
						name = "MarkLogic Github Contributors"
						email = "general@developer.marklogic.com"
						organization = "MarkLogic"
						organizationUrl = "https://www.marklogic.com"
					}
				}
				scm {
					url = "git@github.com:marklogic/${project.name}.git"
					connection = "scm:git@github.com:marklogic/${project.name}.git"
					developerConnection = "scm:git@github.com:marklogic/${project.name}.git"
				}
			}
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	repositories {
		maven {
			if (project.hasProperty("mavenUser")) {
				credentials {
					username mavenUser
					password mavenPassword
				}
				url publishUrl
			} else {
				name = "central"
				url = mavenCentralUrl
				credentials {
					username mavenCentralUsername
					password mavenCentralPassword
				}
			}
		}
	}
}

pluginBundle {
  website = 'https://www.marklogic.com/'
  vcsUrl = 'https://github.com/marklogic/' + project.name + '.git'
  description = 'Publishes ml-gradle'
  tags = ['marklogic']

  plugins {
    mlgradlePlugin {
      id = 'com.marklogic.ml-gradle'
      displayName = 'ml-gradle for MarkLogic'
      description = 'Gradle plugin for configuring and deploying applications to MarkLogic'
      tags = ['marklogic']
      version = project.version
    }
  }

  mavenCoordinates {
    version = project.version
  }
}
